---
- hosts: bastion
  vars:
    ssh_key_file_public: "~/.ssh/id_rsa-{{ dns_domain }}.pub"
    ssh_key_file_private: "~/.ssh/id_rsa-{{ dns_domain }}"

  tasks:
    - set_fact: workshop="rhel-custom-security-content"
      when: workshop is undefined

    - name: create aws credentials directory
      file:
        path: ~/.aws
        state: directory
        mode: 0700
  
    - name: create aws subdirectories
      file:
        path: "~/aws/{{ item }}"
        state: directory
        mode: 0755
      with_items:
        - myconfigs
        - testrun

    - name: Set agnosticd output dir for templates
      set_fact:
        output_dir: "/tmp/workdir/"

    - name: copy execution script
      copy:
        src: run.sh
        dest: "~/run.sh"
        mode: 0755

    - name: create symbolic link to run script for stop
      file:
        src: ~/run.sh
        dest: ~/stop.sh
        state: link
  
    - name: create aws credentials file
      template:
        src: credentials.j2
        dest: ~/.aws/credentials
        mode: 0600

    - name: create deployer vars credentials file
      template:
        src: opentlc_creds.j2
        dest: ~/.aws/opentlc_creds.yml
        mode: 0600
  
    - name: install required software
      yum:
        name:
          - git
          - https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        state: present
      become: yes

    - name: install pip for python2
      yum:
        name:
          - python2-pip
          - python2-simplejson
        state: present
      become: yes
  
    - name: clone agnosticd repo
      git:
        repo: "https://github.com/{{ agnosticd_fork | d('redhat-cop') }}/agnosticd.git"
        version: "{{ agnosticd_branch | d('development') }}"
        dest: ~/agnosticd

    - name: upgrade pip to latest version
      pip:
        name: pip
        state: latest
      become: yes

    - name: install required python modules
      pip:
        name:
          - awscli
          - ansible
          - boto3
          - selinux
        state: latest
      become: yes

    - name: get zone ID for domain {{ dns_domain }}
      route53_info:
        query: hosted_zone
      register: hosted_zones

    - name: store zone ID
      set_fact:
        zone_id: "{{ hosted_zones | json_query(query) | regex_replace('.*/','') | regex_replace('.]$','') }}"
      vars:
        query: "HostedZones[?Name=='{{ dns_domain }}.'].Id"

    - debug:
        msg: "Zone ID for domain {{ dns_domain }} is {{ zone_id }}."

    - name: create ssh key
      openssh_keypair:
        path: "{{ ssh_key_file_private }}"

    - name: link key to id_rsa
      file:
        src: "{{ ssh_key_file_private }}"
        dest: ~/.ssh/id_rsa
        state: link

    - name: retrieve generated key
      fetch:
        src: "{{ item }}"
        dest: "{{ item }}"
        flat: yes
      with_items:
        - "{{ ssh_key_file_private }}"
        - "{{ ssh_key_file_public }}"

    - name: create AWS key
      ec2_key:
        name: id_rsa
        region: "{{ region }}"
        state: present
        key_material: "{{ lookup('file', ssh_key_file_public ) }}"
      register: ec2_key

    - debug:
        var: ec2_key

    - name: create deployment template for {{ workshop }}
      template:
        src: "sample_vars-{{ workshop }}.j2"
        dest: "~/aws/myconfigs/sample_vars-{{ workshop }}.yml"
        mode: 0644

    - name: copy ssh key for login
      authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', ssh_key_file_public ) }}"

    - name: Deploy lab using agnosticd (This task takes up to 40 minutes)
      shell: "bash ~/run.sh {{ workshop }}"
      tags:
        - deploy-lab
      when: destroy_lab is not defined

    - name: Destroying lab using agnosticd
      shell: "bash ~/stop.sh {{ workshop }}"
      tags:
        - deploy-lab
      when: destroy_lab is defined

    - name: Fetch user-data.yml
      fetch:
        src: "{{ output_dir }}/user-data.yaml"
        dest: /tmp/user-data-{{ workshop }}.yaml
        flat: yes
      tags:
        - deploy-lab
      when: destroy_lab is not defined


- hosts: localhost
  tasks:

    - set_fact: workshop="rhel-custom-security-content"
      when: workshop is undefined

    - name: Import variables from user-data.yml
      include_vars:
        file: /tmp/user-data-{{ workshop }}.yaml
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: "clone {{ workshop }} documentation repo"
      git:
        repo: "https://gitlab.com/2020-summit-labs/{{ workshop }}.git"
        dest: "{{ workshop }}"
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined
      ignore_errors: yes

    - debug:
        msg: "You can use this git repository to make changes to the documentation. Location: ./{{ workshop }}"
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: delete workshop-vars.js
      file:
        path: "/tmp/ansible_generated_{{ workshop }}/workshop-vars.js"
        state: absent
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: Create target directory
      file: path=/tmp/ansible_generated_{{ workshop }} state=directory mode=0755
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: create workshop-vars.js template for Bookbag documentation
      template:
        src: "workshop-vars-{{ workshop }}.j2"
        dest: "/tmp/ansible_generated_{{ workshop }}/workshop-vars.js"
        mode: 0644
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - name: docker build
      block:
      - name: Start docker service
        service:
          name: docker
          state: started
        tags:
          - deploy-bookbag
        when: destroy_lab is not defined and ansible_distribution != 'MacOSX'

      - name: build bookbag (docker)
        command: "docker build -t {{ workshop }} ."
        args:
          chdir: "{{ workshop }}"
        tags:
          - deploy-bookbag
        when: destroy_lab is not defined and docker is defined

      - name: kill bookbag instance if any (docker)
        shell: 'docker kill {{ item }}'
        tags:
          - destroy-bookbag
          - deploy-bookbag
        with_file: "/tmp/ansible_generated_{{ workshop }}/.container_id"
        ignore_errors: True

      - name: start bookbag documentation (docker)
        shell: 'docker run -d -e WORKSHOP_VARS="`cat /tmp/ansible_generated_{{ workshop }}/workshop-vars.js`" --rm -p 10080:10080 {{ workshop }}'
        args:
          chdir: "{{ workshop }}"
          executable: /bin/bash
        tags:
          - deploy-bookbag
        register: container_id_docker
        when: destroy_lab is not defined

      - debug:
          var: container_id_docker
        tags:
          - deploy-bookbag

      - name: delete container id file
        file:
          path: "/tmp/ansible_generated_{{ workshop }}/.container_id"
          state: absent
        tags:
          - deploy-bookbag

      - name: save container id
        lineinfile:
          path:  "/tmp/ansible_generated_{{ workshop }}/.container_id"
          line: "{{ container_id_docker.stdout }}"
          create: yes
        tags:
          - deploy-bookbag
        when: destroy_lab is not defined

      when: docker is defined

    - name: podman build
      block:
      - name: build bookbag (podman)
        command: "podman build -t {{ workshop }} ."
        args:
          chdir: "{{ workshop }}"
        tags:
          - deploy-bookbag
        when: destroy_lab is not defined

      - name: kill bookbag instance if any (podman)
        shell: 'podman kill {{ item }}'
        tags:
          - destroy-bookbag
          - deploy-bookbag
        with_file: "/tmp/ansible_generated_{{ workshop }}/.container_id"
        ignore_errors: True

      - name: start bookbag documentation (podman)
        shell: 'podman run -d -e WORKSHOP_VARS="`cat /tmp/ansible_generated_{{ workshop }}/workshop-vars.js`" --rm -p 10080:10080 {{ workshop }}'
        args:
          chdir: "{{ workshop }}"
          executable: /bin/bash
        tags:
          - deploy-bookbag
        register: container_id_podman
        when: destroy_lab is not defined

      - debug:
          var: container_id_podman
        tags:
          - deploy-bookbag

      - name: delete container id file
        file:
          path: "/tmp/ansible_generated_{{ workshop }}/.container_id"
          state: absent
        tags:
          - deploy-bookbag

      - name: save container id
        lineinfile:
          path:  "/tmp/ansible_generated_{{ workshop }}/.container_id"
          line: "{{ container_id_podman.stdout }}"
          create: yes
        tags:
          - deploy-bookbag
        when: destroy_lab is not defined

      when: podman is defined

    - debug:
        msg: "Access the bookbag documentation on http://localhost:10080"
      tags:
        - deploy-bookbag
      when: destroy_lab is not defined

    - debug:
        msg: "Consider executing 'docker image prune' to purge all the unused built images"
      tags:
        - deploy-bookbag
        - deploy-lab
      when: docker is defined

    - debug:
        msg: "Consider executing 'podman image prune' to purge all the unused built images"
      tags:
        - deploy-bookbag
        - deploy-lab
      when: podman is defined
...
